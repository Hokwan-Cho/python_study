""" 
타로는 자주 JOI잡화점에서 물건을 산다. 
JOI잡화점에는 잔돈으로 500엔, 100엔, 50엔, 10엔, 5엔, 1엔이 충분히 있고, 언제나 거스름돈 갯수가 가장 적게 잔돈을 준다. 
타로가 JOI잡화점에서 물건을 사고 카운터에서 1000엔 지폐를 한장 냈을 때, 받을 잔돈에 포함된 잔돈의 갯수를 구하는 프로그램을 작성하시오.


coin = (500, 100, 50, 10, 1 );
change =  1000 -  int(input("물건 값을 입력해주세요: "))  
index = -1 
answer = dict() 

if change < 0 :
    print( "1000엔 보다 비싸서 살 수 없습니다. "); 
else : 
    while (change != 0 ):
        index = index +1 
        coinCount =  change // coin[index] 
        change = change - coinCount * coin[index] 
        answer[ coin[index] ] = coinCount

if len(answer) > 0 :
    print(answer)

 """

"""
[강의번호, 강의시작시간, 강의 종료시간] 인 집합이 있음. 
여러개의 수업을 진행할때, 한번에 가장 많은 수업을 할 수 있는 경우

예제 : [1,1,3], [2,2,5], [3,4,7], [4,1,8], [5,5,9], [6,8,10], [7,9,11], [8,11,14], [9,13,16] 

"""
# lecture= [[1,1,3], [2,2,5], [3,4,7], [4,1,8], [5,5,9], [6,8,10], [7,9,11], [8,11,14], [9,13,16]]


""" 
한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 
각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자.
단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 
회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다. 

첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 
둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 
시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.

예제 입력 
11
1 4
3 5
0 6
5 7
3 8
5 9
6 10
8 11
8 12
2 13
12 14
"""
"""
n = int(input("회의 갯수 입력(n): "))
arr = [] 
answer = []
for _ in range(n) : 
    a,b =map(int,input("시간표 입력(a b): ").split())  # split으로 terable list 만들어줘서 mapdmfh 
    arr.append((a,b))
    arr = sorted(arr, key=lambda x: x[0]) # 시작 시간으로 정렬 
    arr = sorted(arr, key=lambda x: x[1]) # 끝나는 시간으로로 정렬 
 

last = 0
count = 0 

for i, j in arr:
   if (i > last):
       count +=1
       last = j 
       answer.append( (i,j))

print(count)
print(answer)
"""



time = [[3,5],[1,4],[5,6],[0,6],[3,8],[5,9],[8,11],[2,13],[12,14]]
time = sorted(time, key=lambda x: (x[1],x[0]))
print(time)